---
sudo: required
services:
  - docker
env:
  - distribution: centos
    version: 7
    init: /usr/lib/systemd/systemd
    run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
  - distribution: centos
    version: 6
    init: /sbin/init
    run_opts: ""
  - distribution: ubuntu
    version: 16.04
    init: /lib/systemd/systemd
    run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
  - distribution: ubuntu
    version: 14.04
    init: /sbin/init
    run_opts: ""
  - distribution: ubuntu
    version: 12.04
    init: /sbin/init
    run_opts: ""

before_install:
    # Pull image
    - 'sudo docker pull cyverse/ansible-test:latest-${distribution}-${version}'
script:
    - container_id=$(mktemp)
      ###############################################
      #### TEST: 0 - Ansible Syntax Check
      ###############################################
    - 'sudo docker run -it --detach --volume="${PWD}":/etc/ansible/roles/role_under_test:ro ${run_opts} cyverse/ansible-test:latest-${distribution}-${version} "${init}" > "${container_id}"'
    - 'sudo docker exec "$(cat ${container_id})" ansible-galaxy install cyverse.geoip'
      ## TEST: Ansible syntax check.
    - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible-playbook /etc/ansible/roles/role_under_test/tests/test.yml --syntax-check'

      ############################################################################
      #### TEST 1
      ####   - Verify that each beat type can be installed (excl winlogbeat)
      ############################################################################
      #### metricbeat
    - >
        sudo docker exec "$(cat ${container_id})" metricbeat.sh -version
        && (echo 'Metricbeat installed: fail' && exit 1)
        || (echo 'Metricbeat not installed: pass' && exit 0)
    - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible-playbook /etc/ansible/roles/role_under_test/tests/test.yml --extra-vars "beat_name=metricbeat"'
    - >
        sudo docker exec "$(cat ${container_id})" metricbeat.sh -version
        && (echo 'Metricbeat installed: pass' && exit 0)
        || (echo 'Metricbeat not installed: fail' && exit 1)

      #### filebeat
    - >
        sudo docker exec "$(cat ${container_id})" filebeat.sh -version
        && (echo 'Filebeat installed: fail' && exit 1)
        || (echo 'Filebeat not installed: pass' && exit 0)
    - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible-playbook /etc/ansible/roles/role_under_test/tests/test.yml --extra-vars "beat_name=filebeat"'
    - >
        sudo docker exec "$(cat ${container_id})" filebeat.sh -version
        && (echo 'Filebeat installed: pass' && exit 0)
        || (echo 'Filebeat not installed: fail' && exit 1)

      #### packetbeat
    - >
        sudo docker exec "$(cat ${container_id})" packetbeat.sh -version
        && (echo 'packetbeat installed: fail' && exit 1)
        || (echo 'packetbeat not installed: pass' && exit 0)
    - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible-playbook /etc/ansible/roles/role_under_test/tests/test.yml --extra-vars "beat_name=packetbeat"'
    - >
        sudo docker exec "$(cat ${container_id})" packetbeat.sh -version
        && (echo 'packetbeat installed: pass' && exit 0)
        || (echo 'packetbeat not installed: fail' && exit 1)

      ###############################################
      #### TEST 1.1
      ####   - Verify installation idempotence
      ###############################################
    - > 
        sudo docker exec "$(cat ${container_id})" ansible-playbook /etc/ansible/roles/role_under_test/tests/test.yml --extra-vars "beat_name=metricbeat"
        | grep -q 'changed=0.*failed=0'
        && (echo 'Installation Idempotence test: pass' && exit 0)
        || (echo 'Installation Idempotence test: fail' && exit 1)

      # Clean up
    - 'sudo docker stop "$(cat ${container_id})"'

      ###############################################
      #### TEST - GeoIP
      ###############################################
    - 'sudo docker run -it --detach --volume="${PWD}":/etc/ansible/roles/role_under_test:ro ${run_opts} cyverse/ansible-test:latest-${distribution}-${version} "${init}" > "${container_id}"'
    - 'sudo docker exec "$(cat ${container_id})" ansible-galaxy install cyverse.geoip'

    - >
        sudo docker exec "$(cat ${container_id})" ls /usr/share/GeoIP &>/dev/null
        && (echo 'This directory should not yet exist: fail' && exit 1)
        || (echo 'This directory does not yet exist: pass' && exit 0)
    - >
        sudo docker exec "$(cat ${container_id})" ansible-playbook /etc/ansible/roles/role_under_test/tests/test.yml --extra-vars "beat_geoip=true beat_install=false"
        | grep -q 'changed=3.*failed=0'
        && (echo 'Correct Number of Changes: pass' && exit 0)
        || (echo 'Incorrect Number of Changes: fail' && exit 1)
    - >
        sudo docker exec "$(cat ${container_id})" ls /usr/share/GeoIP/GeoLiteCity.dat
        && (echo '/usr/share/GeoIP/GeoLiteCity.dat extracted: pass' && exit 0)
        || (echo '/usr/share/GeoIP/GeoLiteCity.dat not extracted: fail' && exit 1)

      # Clean up
    - 'sudo docker stop "$(cat ${container_id})"'


      ###############################################
      #### TEST - beat_cfg, restart, idempotence
      ###############################################
    - 'sudo docker run -it --detach --volume="${PWD}":/etc/ansible/roles/role_under_test:ro ${run_opts} cyverse/ansible-test:latest-${distribution}-${version} "${init}" > "${container_id}"'
    - 'sudo docker exec "$(cat ${container_id})" ansible-galaxy install cyverse.geoip'

    - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible-playbook /etc/ansible/roles/role_under_test/tests/test.yml --extra-vars "beat_name=metricbeat"'
    - >
        sudo docker exec "$(cat ${container_id})" cat /etc/metricbeat/metricbeat.yml
        | grep -q 'DNE_TEST_ONLY'
        && (echo 'metricbeat.yml should not contain the text "DNE_TEST_ONLY": fail' && exit 1)
        || (echo 'metricbeat.yml does not contain the text "DNE_TEST_ONLY": pass' && exit 0)

      ## Execute role with `beat_config` specified, verify correct number of changes.
    - >
       sudo docker exec "$(cat ${container_id})" ansible-playbook /etc/ansible/roles/role_under_test/tests/test.yml --extra-vars '{"beat_name":"metricbeat", "beat_config": {"input": {"period": 10, "procs": [".*"], "stats": {"system": true, "proc": true, "filesystem": true, "cpu_per_core": false}}, "output": {"elasticsearch": {"hosts": ["localhost:9200"]}}, "shipper": {"tags": ["DNE_TEST_ONLY"]}, "logging": {"to_files": true, "files": {"path": "/path/to/log/file.log"}}}}'
       | grep -q 'changed=2.*failed=0'
       && (echo 'Correct number of changes detected: pass' && exit 0)
       || (echo 'Wrong number of changes detected: fail' && exit 1)
    - >
        sudo docker exec "$(cat ${container_id})" cat /etc/metricbeat/metricbeat.yml
        | grep -q 'DNE_TEST_ONLY'
        && (echo 'metricbeat.yml contains the text "DNE_TEST_ONLY": pass' && exit 0)
        || (echo 'metricbeat.yml should contain the text "DNE_TEST_ONLY", but does not: fail' && exit 1)

        ## TODO: Verify restart
      ## TEST: Test role idempotence - set config.
    - >
       sudo docker exec "$(cat ${container_id})" ansible-playbook /etc/ansible/roles/role_under_test/tests/test.yml --extra-vars '{"beat_name":"metricbeat", "beat_config": {"input": {"period": 10, "procs": [".*"], "stats": {"system": true, "proc": true, "filesystem": true, "cpu_per_core": false}}, "output": {"elasticsearch": {"hosts": ["localhost:9200"]}}, "shipper": {"tags": ["DNE_TEST_ONLY"]}, "logging": {"to_files": true, "files": {"path": "/path/to/log/file.log"}}}}' 
       | grep -q 'changed=0.*failed=0'
       && (echo 'Cfg Idempotence test: pass' && exit 0)
       || (echo 'Cfg Idempotence test: fail' && exit 1)

      # Clean up
    - 'sudo docker stop "$(cat ${container_id})"'

      ###############################################
      #### TEST - beat_svc_*
      ###############################################
#    - 'sudo docker run -it --detach --volume="${PWD}":/etc/ansible/roles/role_under_test:ro ${run_opts} cyverse/ansible-test:latest-${distribution}-${version} "${init}" > "${container_id}"'
#    - 'sudo docker exec "$(cat ${container_id})" ansible-galaxy install cyverse.geoip'
#      # TODO: Verify expected service state and enabled values
#    - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible-playbook /etc/ansible/roles/role_under_test/tests/test.yml --extra-vars "beat_name=metricbeat"'
#    - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible-playbook /etc/ansible/roles/role_under_test/tests/test.yml --extra-vars "beat_name=metricbeat beat_install=false beat_svc_state=started"'
#    - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible-playbook /etc/ansible/roles/role_under_test/tests/test.yml --extra-vars "beat_name=metricbeat beat_install=false beat_svc_enabled=true"'
#      
#      # TODO: Verify expected service state and enabled values
#
#    - >
#       sudo docker exec "$(cat ${container_id})" ansible-playbook /etc/ansible/roles/role_under_test/tests/test.yml --extra-vars "beat_name=metricbeat beat_install=false beat_svc_state=stopped"
#       | grep -q 'changed=1.*failed=0'
#       && (echo 'Correct number of changes detected: pass' && exit 0)
#       || (echo 'Wrong number of changes detected: fail' && exit 1)
#
#      # TODO: Verify expected service state value
#
#    - >
#       sudo docker exec "$(cat ${container_id})" ansible-playbook /etc/ansible/roles/role_under_test/tests/test.yml --extra-vars "beat_name=metricbeat beat_install=false beat_svc_enabled=false"
#       | grep -q 'changed=1.*failed=0'
#       && (echo 'Correct number of changes detected: pass' && exit 0)
#       || (echo 'Wrong number of changes detected: fail' && exit 1)
#
#      # TODO: Verify expected service enabled value
#
#      # Clean up
#    - 'sudo docker stop "$(cat ${container_id})"'

notifications:
  webhooks:
    urls:
       - https://galaxy.ansible.com/api/v1/notifications/
    on_success: always
    on_failure: never

